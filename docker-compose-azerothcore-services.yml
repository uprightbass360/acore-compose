# ==============================================
# AZEROTHCORE SERVICES LAYER (COMBINED)
# ==============================================
# Authentication server, world server, client data, modules, and optional services
# Deploy this layer AFTER the database layer is running

services:
  # Client Data Download Service
  ac-client-data:
    image: ${ALPINE_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_CLIENT_DATA}
    user: "0:0"  # Run as root to install packages
    volumes:
      - ${STORAGE_PATH}/data:/azerothcore/data
      - ${STORAGE_PATH}/cache:/cache
    working_dir: /tmp
    command:
      - sh
      - -c
      - |
        apk add --no-cache curl unzip wget ca-certificates p7zip jq

        # Fix ownership of mount points to match NFS
        chown -R 1001:1001 /azerothcore/data /cache

        # Create cache directory if it doesn't exist
        mkdir -p /cache

        echo 'üöÄ Starting AzerothCore game data setup...'

        # Get the latest release info from wowgaming/client-data
        echo 'üì° Fetching latest client data release info...'
        RELEASE_INFO=$$(wget -qO- https://api.github.com/repos/wowgaming/client-data/releases/latest 2>/dev/null)

        if [ -n "$$RELEASE_INFO" ]; then
          LATEST_URL=$$(echo "$$RELEASE_INFO" | grep '"browser_download_url":' | grep '\.zip' | cut -d'"' -f4 | head -1)
          LATEST_TAG=$$(echo "$$RELEASE_INFO" | grep '"tag_name":' | cut -d'"' -f4)
          LATEST_SIZE=$$(echo "$$RELEASE_INFO" | grep '"size":' | head -1 | grep -o '[0-9]*')
        fi

        if [ -z "$$LATEST_URL" ]; then
          echo '‚ùå Could not fetch latest release URL'
          echo 'üì• Using fallback: direct download from v16 release'
          LATEST_URL='https://github.com/wowgaming/client-data/releases/download/v16/data.zip'
          LATEST_TAG='v16'
          LATEST_SIZE='0'
        fi

        echo "üìç Latest release: $$LATEST_TAG"
        echo "üì• Download URL: $$LATEST_URL"

        # Cache file paths
        CACHE_FILE="/cache/client-data-$$LATEST_TAG.zip"
        VERSION_FILE="/cache/client-data-version.txt"

        # Check if we have a cached version
        if [ -f "$$CACHE_FILE" ] && [ -f "$$VERSION_FILE" ]; then
          CACHED_VERSION=$$(cat "$$VERSION_FILE" 2>/dev/null)
          if [ "$$CACHED_VERSION" = "$$LATEST_TAG" ]; then
            echo "‚úÖ Found cached client data version $$LATEST_TAG"
            echo "üìä Cached file size: $$(ls -lh "$$CACHE_FILE" | awk '{print $$5}')"

            # Verify cache file integrity
            if unzip -t "$$CACHE_FILE" > /dev/null 2>&1; then
              echo "‚úÖ Cache file integrity verified"
              echo "‚ö° Using cached download - skipping download phase"
              cp "$$CACHE_FILE" data.zip
            else
              echo "‚ö†Ô∏è Cache file corrupted, will re-download"
              rm -f "$$CACHE_FILE" "$$VERSION_FILE"
            fi
          else
            echo "üì¶ Cache version ($$CACHED_VERSION) differs from latest ($$LATEST_TAG)"
            echo "üóëÔ∏è Removing old cache"
            rm -f /cache/client-data-*.zip "$$VERSION_FILE"
          fi
        fi

        # Download if we don't have a valid cached file
        if [ ! -f "data.zip" ]; then
          echo "üì• Downloading client data (~15GB, may take 10-30 minutes)..."
          echo "üìç Source: $$LATEST_URL"

          # Download with clean progress indication
          echo "üì• Starting download..."
          wget --progress=dot:giga -O "$$CACHE_FILE.tmp" "$$LATEST_URL" 2>&1 | sed 's/^/üìä /' || {
            echo '‚ùå wget failed, trying curl...'
            curl -L --progress-bar -o "$$CACHE_FILE.tmp" "$$LATEST_URL" || {
              echo '‚ùå All download methods failed'
              rm -f "$$CACHE_FILE.tmp"
              exit 1
            }
          }

          # Verify download integrity
          if unzip -t "$$CACHE_FILE.tmp" > /dev/null 2>&1; then
            mv "$$CACHE_FILE.tmp" "$$CACHE_FILE"
            echo "$$LATEST_TAG" > "$$VERSION_FILE"
            echo '‚úÖ Download completed and verified'
            echo "üìä File size: $$(ls -lh "$$CACHE_FILE" | awk '{print $$5}')"
            cp "$$CACHE_FILE" data.zip
          else
            echo '‚ùå Downloaded file is corrupted'
            rm -f "$$CACHE_FILE.tmp"
            exit 1
          fi
        fi

        echo 'üìÇ Extracting client data (this may take 10-15 minutes)...'
        echo '‚è≥ Please wait while extracting...'

        # Clear existing data if extraction failed previously
        rm -rf /azerothcore/data/maps /azerothcore/data/vmaps /azerothcore/data/mmaps /azerothcore/data/dbc

        # Extract with detailed progress tracking
        echo 'üîÑ Starting extraction with progress monitoring...'

        # Start extraction in background with overwrite
        unzip -o -q data.zip -d /azerothcore/data/ &

        UNZIP_PID=$!
        LAST_CHECK_TIME=0

        # Monitor progress with directory size checks
        while kill -0 "$$UNZIP_PID" 2>/dev/null; do
          CURRENT_TIME=$$(date +%s)
          if [ $$((CURRENT_TIME - LAST_CHECK_TIME)) -ge 30 ]; then
            LAST_CHECK_TIME=$$CURRENT_TIME

            # Check what's been extracted so far
            PROGRESS_MSG="üìä Progress at $$(date '+%H:%M:%S'):"

            if [ -d "/azerothcore/data/dbc" ] && [ -n "$$(ls -A /azerothcore/data/dbc 2>/dev/null)" ]; then
              DBC_SIZE=$$(du -sh /azerothcore/data/dbc 2>/dev/null | cut -f1)
              PROGRESS_MSG="$$PROGRESS_MSG DBC($$DBC_SIZE)"
            fi

            if [ -d "/azerothcore/data/maps" ] && [ -n "$$(ls -A /azerothcore/data/maps 2>/dev/null)" ]; then
              MAPS_SIZE=$$(du -sh /azerothcore/data/maps 2>/dev/null | cut -f1)
              PROGRESS_MSG="$$PROGRESS_MSG Maps($$MAPS_SIZE)"
            fi

            if [ -d "/azerothcore/data/vmaps" ] && [ -n "$$(ls -A /azerothcore/data/vmaps 2>/dev/null)" ]; then
              VMAPS_SIZE=$$(du -sh /azerothcore/data/vmaps 2>/dev/null | cut -f1)
              PROGRESS_MSG="$$PROGRESS_MSG VMaps($$VMAPS_SIZE)"
            fi

            if [ -d "/azerothcore/data/mmaps" ] && [ -n "$$(ls -A /azerothcore/data/mmaps 2>/dev/null)" ]; then
              MMAPS_SIZE=$$(du -sh /azerothcore/data/mmaps 2>/dev/null | cut -f1)
              PROGRESS_MSG="$$PROGRESS_MSG MMaps($$MMAPS_SIZE)"
            fi

            echo "$$PROGRESS_MSG"
          fi
          sleep 5
        done

        wait "$$UNZIP_PID"
        UNZIP_EXIT_CODE=$?

        if [ $$UNZIP_EXIT_CODE -ne 0 ]; then
          echo '‚ùå Extraction failed'
          rm -f data.zip
          exit 1
        fi

        # Clean up temporary extraction file (keep cached version)
        rm -f data.zip

        echo '‚úÖ Client data extraction complete!'
        echo 'üìÅ Verifying extracted directories:'

        # Verify required directories exist and have content
        ALL_GOOD=true
        for dir in maps vmaps mmaps dbc; do
          if [ -d "/azerothcore/data/$$dir" ] && [ -n "$$(ls -A /azerothcore/data/$$dir 2>/dev/null)" ]; then
            DIR_SIZE=$$(du -sh /azerothcore/data/$$dir 2>/dev/null | cut -f1)
            echo "‚úÖ $$dir directory: OK ($$DIR_SIZE)"
          else
            echo "‚ùå $$dir directory: MISSING or EMPTY"
            ALL_GOOD=false
          fi
        done

        if [ "$$ALL_GOOD" = "true" ]; then
          echo 'üéâ Game data setup complete! AzerothCore worldserver can now start.'
          echo "üíæ Cached version $$LATEST_TAG for future use"
        else
          echo '‚ùå Some directories are missing or empty'
          exit 1
        fi
    restart: "no"
    networks:
      - azerothcore

  # Auth server
  ac-authserver:
    image: ${AC_AUTHSERVER_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_AUTHSERVER}
    user: "0:0"  # Run as root to handle NFS permissions
    environment:
      AC_LOGIN_DATABASE_INFO: "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_AUTH_NAME}"
      AC_UPDATES_ENABLE_DATABASES: "0"
      AC_BIND_IP: "0.0.0.0"
      AC_LOG_LEVEL: "1"
      AC_LOGGER_ROOT_CONFIG: "1,Console"
      AC_LOGGER_SERVER_CONFIG: "1,Console"
      AC_APPENDER_CONSOLE_CONFIG: "1,2,0"
    ports:
      - "${AUTH_EXTERNAL_PORT}:${AUTH_PORT}"
    restart: unless-stopped
    networks:
      - azerothcore
    volumes:
      - ${STORAGE_PATH}/config:/azerothcore/env/dist/etc
    cap_add:
      - SYS_NICE
    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep '[a]uthserver' | grep -v grep || exit 1"]
      interval: ${AUTH_HEALTHCHECK_INTERVAL}
      timeout: ${AUTH_HEALTHCHECK_TIMEOUT}
      retries: ${AUTH_HEALTHCHECK_RETRIES}
      start_period: ${AUTH_HEALTHCHECK_START_PERIOD}

  # World server with Playerbots support
  ac-worldserver:
    image: ${AC_WORLDSERVER_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_WORLDSERVER}
    user: "0:0"  # Run as root to handle NFS permissions
    stdin_open: true
    tty: true
    depends_on:
      - ac-authserver
      - ac-client-data
    environment:
      AC_LOGIN_DATABASE_INFO: "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_AUTH_NAME}"
      AC_WORLD_DATABASE_INFO: "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_WORLD_NAME}"
      AC_CHARACTER_DATABASE_INFO: "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_CHARACTERS_NAME}"
      AC_UPDATES_ENABLE_DATABASES: "0"
      AC_BIND_IP: "0.0.0.0"
      AC_DATA_DIR: "/azerothcore/data"
      AC_SOAP_PORT: "7878"
      AC_PROCESS_PRIORITY: "0"
      PLAYERBOT_ENABLED: "${PLAYERBOT_ENABLED}"
      PLAYERBOT_MAX_BOTS: "${PLAYERBOT_MAX_BOTS}"
      # Logger configuration - Use config file defaults with proper log level
      AC_LOG_LEVEL: "2"
    ports:
      - "${WORLD_EXTERNAL_PORT}:${WORLD_PORT}"
      - "${SOAP_EXTERNAL_PORT}:${SOAP_PORT}"
    volumes:
      - ${STORAGE_PATH}/data:/azerothcore/data
      - ${STORAGE_PATH}/config:/azerothcore/env/dist/etc
      - ${STORAGE_PATH}/logs:/azerothcore/logs
      - ${STORAGE_PATH}/modules:/azerothcore/modules
    restart: unless-stopped
    networks:
      - azerothcore
    cap_add:
      - SYS_NICE
    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep '[w]orldserver' | grep -v grep || exit 1"]
      interval: ${WORLD_HEALTHCHECK_INTERVAL}
      timeout: ${WORLD_HEALTHCHECK_TIMEOUT}
      retries: ${WORLD_HEALTHCHECK_RETRIES}
      start_period: ${WORLD_HEALTHCHECK_START_PERIOD}

  # Optional: Eluna Lua Engine
  ac-eluna:
    image: ${AC_ELUNA_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_ELUNA}
    user: "0:0"  # Run as root to handle NFS permissions
    restart: unless-stopped
    networks:
      - azerothcore

  # Module Management Service
  ac-modules:
    image: ${ALPINE_GIT_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_MODULES}
    user: "0:0"  # Run as root to handle NFS permissions
    volumes:
      - ${STORAGE_PATH}/modules:/modules
      - ${STORAGE_PATH}/config:/azerothcore/env/dist/etc
    environment:
      - GIT_EMAIL=${GIT_EMAIL}
      - GIT_PAT=${GIT_PAT}
      - GIT_USERNAME=${GIT_USERNAME}
      - MODULE_PLAYERBOTS=${MODULE_PLAYERBOTS}
      - MODULE_AOE_LOOT=${MODULE_AOE_LOOT}
      - MODULE_LEARN_SPELLS=${MODULE_LEARN_SPELLS}
      - MODULE_FIREWORKS=${MODULE_FIREWORKS}
      - MODULE_INDIVIDUAL_PROGRESSION=${MODULE_INDIVIDUAL_PROGRESSION}
      # Quality of Life Modules
      - MODULE_AHBOT=${MODULE_AHBOT}
      - MODULE_AUTOBALANCE=${MODULE_AUTOBALANCE}
      - MODULE_TRANSMOG=${MODULE_TRANSMOG}
      - MODULE_NPC_BUFFER=${MODULE_NPC_BUFFER}
      # Gameplay Enhancement Modules
      - MODULE_DYNAMIC_XP=${MODULE_DYNAMIC_XP}
      - MODULE_SOLO_LFG=${MODULE_SOLO_LFG}
      - MODULE_1V1_ARENA=${MODULE_1V1_ARENA}
      - MODULE_PHASED_DUELS=${MODULE_PHASED_DUELS}
      # Server Management Modules
      - MODULE_BREAKING_NEWS=${MODULE_BREAKING_NEWS}
      - MODULE_BOSS_ANNOUNCER=${MODULE_BOSS_ANNOUNCER}
      - MODULE_ACCOUNT_ACHIEVEMENTS=${MODULE_ACCOUNT_ACHIEVEMENTS}
      # Additional Modules Found in Config
      - MODULE_AUTO_REVIVE=${MODULE_AUTO_REVIVE}
      - MODULE_GAIN_HONOR_GUARD=${MODULE_GAIN_HONOR_GUARD}
      - MODULE_ELUNA=${MODULE_ELUNA}
      - MODULE_TIME_IS_TIME=${MODULE_TIME_IS_TIME}
      - MODULE_POCKET_PORTAL=${MODULE_POCKET_PORTAL}
      - MODULE_RANDOM_ENCHANTS=${MODULE_RANDOM_ENCHANTS}
      - MODULE_SOLOCRAFT=${MODULE_SOLOCRAFT}
      - MODULE_PVP_TITLES=${MODULE_PVP_TITLES}
      - MODULE_NPC_BEASTMASTER=${MODULE_NPC_BEASTMASTER}
      - MODULE_NPC_ENCHANTER=${MODULE_NPC_ENCHANTER}
      - MODULE_INSTANCE_RESET=${MODULE_INSTANCE_RESET}
      - MODULE_LEVEL_GRANT=${MODULE_LEVEL_GRANT}
      # Database connection for SQL execution
      - CONTAINER_MYSQL=${CONTAINER_MYSQL}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - DB_AUTH_NAME=${DB_AUTH_NAME}
      - DB_WORLD_NAME=${DB_WORLD_NAME}
      - DB_CHARACTERS_NAME=${DB_CHARACTERS_NAME}
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo 'Setting up git user'
        git config --global user.name "$GIT_USERNAME"
        git config --global user.email "$GIT_EMAIL"
        git config --global url.https://$GIT_PAT@github.com/.insteadOf https://github.com/
        
        echo 'Initializing module management...'
        cd /modules

        echo 'Cleaning up disabled modules...'

        # Remove modules if disabled
        if [ "$MODULE_PLAYERBOTS" != "1" ] && [ -d "mod-playerbots" ]; then
          echo 'Removing mod-playerbots (disabled)...'
          rm -rf mod-playerbots
        fi

        if [ "$MODULE_AOE_LOOT" != "1" ] && [ -d "mod-aoe-loot" ]; then
          echo 'Removing mod-aoe-loot (disabled)...'
          rm -rf mod-aoe-loot
        fi

        if [ "$MODULE_LEARN_SPELLS" != "1" ] && [ -d "mod-learn-spells" ]; then
          echo 'Removing mod-learn-spells (disabled)...'
          rm -rf mod-learn-spells
        fi

        if [ "$MODULE_FIREWORKS" != "1" ] && [ -d "mod-fireworks-on-level" ]; then
          echo 'Removing mod-fireworks-on-level (disabled)...'
          rm -rf mod-fireworks-on-level
        fi

        if [ "$MODULE_INDIVIDUAL_PROGRESSION" != "1" ] && [ -d "mod-individual-progression" ]; then
          echo 'Removing mod-individual-progression (disabled)...'
          rm -rf mod-individual-progression
        fi

        if [ "$MODULE_AHBOT" != "1" ] && [ -d "mod-ahbot" ]; then
          echo 'Removing mod-ahbot (disabled)...'
          rm -rf mod-ahbot
        fi

        if [ "$MODULE_AUTOBALANCE" != "1" ] && [ -d "mod-autobalance" ]; then
          echo 'Removing mod-autobalance (disabled)...'
          rm -rf mod-autobalance
        fi

        if [ "$MODULE_TRANSMOG" != "1" ] && [ -d "mod-transmog" ]; then
          echo 'Removing mod-transmog (disabled)...'
          rm -rf mod-transmog
        fi

        if [ "$MODULE_NPC_BUFFER" != "1" ] && [ -d "mod-npc-buffer" ]; then
          echo 'Removing mod-npc-buffer (disabled)...'
          rm -rf mod-npc-buffer
        fi

        if [ "$MODULE_DYNAMIC_XP" != "1" ] && [ -d "mod-dynamic-xp" ]; then
          echo 'Removing mod-dynamic-xp (disabled)...'
          rm -rf mod-dynamic-xp
        fi

        if [ "$MODULE_SOLO_LFG" != "1" ] && [ -d "mod-solo-lfg" ]; then
          echo 'Removing mod-solo-lfg (disabled)...'
          rm -rf mod-solo-lfg
        fi

        if [ "$MODULE_1V1_ARENA" != "1" ] && [ -d "mod-1v1-arena" ]; then
          echo 'Removing mod-1v1-arena (disabled)...'
          rm -rf mod-1v1-arena
        fi

        if [ "$MODULE_PHASED_DUELS" != "1" ] && [ -d "mod-phased-duels" ]; then
          echo 'Removing mod-phased-duels (disabled)...'
          rm -rf mod-phased-duels
        fi

        if [ "$MODULE_BREAKING_NEWS" != "1" ] && [ -d "mod-breaking-news-override" ]; then
          echo 'Removing mod-breaking-news-override (disabled)...'
          rm -rf mod-breaking-news-override
        fi

        if [ "$MODULE_BOSS_ANNOUNCER" != "1" ] && [ -d "mod-boss-announcer" ]; then
          echo 'Removing mod-boss-announcer (disabled)...'
          rm -rf mod-boss-announcer
        fi

        if [ "$MODULE_ACCOUNT_ACHIEVEMENTS" != "1" ] && [ -d "mod-account-achievements" ]; then
          echo 'Removing mod-account-achievements (disabled)...'
          rm -rf mod-account-achievements
        fi

        if [ "$MODULE_AUTO_REVIVE" != "1" ] && [ -d "mod-auto-revive" ]; then
          echo 'Removing mod-auto-revive (disabled)...'
          rm -rf mod-auto-revive
        fi

        if [ "$MODULE_GAIN_HONOR_GUARD" != "1" ] && [ -d "mod-gain-honor-guard" ]; then
          echo 'Removing mod-gain-honor-guard (disabled)...'
          rm -rf mod-gain-honor-guard
        fi

        if [ "$MODULE_ELUNA" != "1" ] && [ -d "mod-eluna" ]; then
          echo 'Removing mod-eluna (disabled)...'
          rm -rf mod-eluna
        fi

        if [ "$MODULE_TIME_IS_TIME" != "1" ] && [ -d "mod-TimeIsTime" ]; then
          echo 'Removing mod-TimeIsTime (disabled)...'
          rm -rf mod-TimeIsTime
        fi

        if [ "$MODULE_POCKET_PORTAL" != "1" ] && [ -d "mod-pocket-portal" ]; then
          echo 'Removing mod-pocket-portal (disabled)...'
          rm -rf mod-pocket-portal
        fi

        if [ "$MODULE_RANDOM_ENCHANTS" != "1" ] && [ -d "mod-random-enchants" ]; then
          echo 'Removing mod-random-enchants (disabled)...'
          rm -rf mod-random-enchants
        fi

        if [ "$MODULE_SOLOCRAFT" != "1" ] && [ -d "mod-solocraft" ]; then
          echo 'Removing mod-solocraft (disabled)...'
          rm -rf mod-solocraft
        fi

        if [ "$MODULE_PVP_TITLES" != "1" ] && [ -d "mod-pvp-titles" ]; then
          echo 'Removing mod-pvp-titles (disabled)...'
          rm -rf mod-pvp-titles
        fi

        if [ "$MODULE_NPC_BEASTMASTER" != "1" ] && [ -d "mod-npc-beastmaster" ]; then
          echo 'Removing mod-npc-beastmaster (disabled)...'
          rm -rf mod-npc-beastmaster
        fi

        if [ "$MODULE_NPC_ENCHANTER" != "1" ] && [ -d "mod-npc-enchanter" ]; then
          echo 'Removing mod-npc-enchanter (disabled)...'
          rm -rf mod-npc-enchanter
        fi

        if [ "$MODULE_INSTANCE_RESET" != "1" ] && [ -d "mod-instance-reset" ]; then
          echo 'Removing mod-instance-reset (disabled)...'
          rm -rf mod-instance-reset
        fi

        if [ "$MODULE_LEVEL_GRANT" != "1" ] && [ -d "mod-quest-count-level" ]; then
          echo 'Removing mod-quest-count-level (disabled)...'
          rm -rf mod-quest-count-level
        fi

        echo 'Installing enabled modules...'

        # Install Playerbots if enabled
        if [ "$MODULE_PLAYERBOTS" = "1" ] && [ ! -d "mod-playerbots" ]; then
          echo 'ü§ñ Installing mod-playerbots...'
          echo '   üìñ Project: https://github.com/liyunfan1223/mod-playerbots'
          echo '   üö® CRITICAL: REQUIRES Custom AzerothCore branch (liyunfan1223/azerothcore-wotlk/tree/Playerbot)'
          echo '   üö® INCOMPATIBLE with standard AzerothCore - module will not function properly'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          echo '   üìã POST-INSTALL: Requires manual account/character configuration'
          git clone https://github.com/liyunfan1223/mod-playerbots.git mod-playerbots
        fi

        # Install AOE Loot if enabled
        if [ "$MODULE_AOE_LOOT" = "1" ] && [ ! -d "mod-aoe-loot" ]; then
          echo 'üí∞ Installing mod-aoe-loot...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-aoe-loot'
          echo '   ‚ÑπÔ∏è  Allows looting multiple corpses with one action'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          git clone https://github.com/azerothcore/mod-aoe-loot.git mod-aoe-loot
        fi

        # Install Learn Spells if enabled
        if [ "$MODULE_LEARN_SPELLS" = "1" ] && [ ! -d "mod-learn-spells" ]; then
          echo 'üìö Installing mod-learn-spells...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-learn-spells'
          echo '   ‚ÑπÔ∏è  Automatically teaches class spells on level up'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          git clone https://github.com/azerothcore/mod-learn-spells.git mod-learn-spells
        fi

        # Install Fireworks on Level if enabled
        if [ "$MODULE_FIREWORKS" = "1" ] && [ ! -d "mod-fireworks-on-level" ]; then
          echo 'üéÜ Installing mod-fireworks-on-level...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-fireworks-on-level'
          echo '   ‚ÑπÔ∏è  Displays fireworks when players level up'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          git clone https://github.com/azerothcore/mod-fireworks-on-level.git mod-fireworks-on-level
        fi

        # Install Individual Progression if enabled
        if [ "$MODULE_INDIVIDUAL_PROGRESSION" = "1" ] && [ ! -d "mod-individual-progression" ]; then
          echo '‚è≥ Installing mod-individual-progression...'
          echo '   üìñ Project: https://github.com/ZhengPeiRu21/mod-individual-progression'
          echo '   ‚ÑπÔ∏è  Simulates authentic Vanilla‚ÜíTBC‚ÜíWotLK progression per player'
          echo '   ‚úÖ AUTO-CONFIG: Automatically sets EnablePlayerSettings=1 and DBC.EnforceItemAttributes=0'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          echo '   üìÅ Optional client files available in optional/ directory'
          git clone https://github.com/ZhengPeiRu21/mod-individual-progression.git mod-individual-progression
        fi

        # Quality of Life Modules
        if [ "$MODULE_AHBOT" = "1" ] && [ ! -d "mod-ahbot" ]; then
          echo 'üè™ Installing mod-ahbot...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-ahbot'
          echo '   ‚ÑπÔ∏è  Auction house bot that buys and sells items automatically'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          echo '   üìã POST-INSTALL: Requires manual account/character setup in mod_ahbot.conf'
          git clone https://github.com/azerothcore/mod-ahbot.git mod-ahbot
        fi

        if [ "$MODULE_AUTOBALANCE" = "1" ] && [ ! -d "mod-autobalance" ]; then
          echo '‚öñÔ∏è  Installing mod-autobalance...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-autobalance'
          echo '   ‚ÑπÔ∏è  Automatically adjusts dungeon difficulty based on party size'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          git clone https://github.com/azerothcore/mod-autobalance.git mod-autobalance
        fi

        if [ "$MODULE_TRANSMOG" = "1" ] && [ ! -d "mod-transmog" ]; then
          echo 'Installing mod-transmog...'
          git clone https://github.com/azerothcore/mod-transmog.git mod-transmog
        fi

        if [ "$MODULE_NPC_BUFFER" = "1" ] && [ ! -d "mod-npc-buffer" ]; then
          echo 'Installing mod-npc-buffer...'
          git clone https://github.com/azerothcore/mod-npc-buffer.git mod-npc-buffer
        fi

        # Gameplay Enhancement Modules
        if [ "$MODULE_DYNAMIC_XP" = "1" ] && [ ! -d "mod-dynamic-xp" ]; then
          echo 'Installing mod-dynamic-xp...'
          git clone https://github.com/azerothcore/mod-dynamic-xp.git mod-dynamic-xp
        fi

        if [ "$MODULE_SOLO_LFG" = "1" ] && [ ! -d "mod-solo-lfg" ]; then
          echo 'üîç Installing mod-solo-lfg...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-solo-lfg'
          echo '   ‚ÑπÔ∏è  Allows dungeon finder for solo players and small groups'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          echo '   üí° Pairs perfectly with mod-solocraft and mod-autobalance'
          git clone https://github.com/azerothcore/mod-solo-lfg.git mod-solo-lfg
        fi

        if [ "$MODULE_1V1_ARENA" = "1" ] && [ ! -d "mod-1v1-arena" ]; then
          echo 'Installing mod-1v1-arena...'
          git clone https://github.com/azerothcore/mod-1v1-arena.git mod-1v1-arena
        fi

        if [ "$MODULE_PHASED_DUELS" = "1" ] && [ ! -d "mod-phased-duels" ]; then
          echo 'Installing mod-phased-duels...'
          git clone https://github.com/azerothcore/mod-phased-duels.git mod-phased-duels
        fi

        # Server Management Modules
        if [ "$MODULE_BREAKING_NEWS" = "1" ] && [ ! -d "mod-breaking-news-override" ]; then
          echo 'üì∞ Installing mod-breaking-news-override...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-breaking-news-override'
          echo '   ‚ÑπÔ∏è  Displays custom breaking news on character selection screen'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          echo '   üìã POST-INSTALL: Requires custom HTML file creation and path configuration'
          git clone https://github.com/azerothcore/mod-breaking-news-override.git mod-breaking-news-override
        fi

        if [ "$MODULE_BOSS_ANNOUNCER" = "1" ] && [ ! -d "mod-boss-announcer" ]; then
          echo 'Installing mod-boss-announcer...'
          git clone https://github.com/azerothcore/mod-boss-announcer.git mod-boss-announcer
        fi

        if [ "$MODULE_ACCOUNT_ACHIEVEMENTS" = "1" ] && [ ! -d "mod-account-achievements" ]; then
          echo 'Installing mod-account-achievements...'
          git clone https://github.com/azerothcore/mod-account-achievements.git mod-account-achievements
        fi

        # Additional Modules Found in Config
        if [ "$MODULE_AUTO_REVIVE" = "1" ] && [ ! -d "mod-auto-revive" ]; then
          echo 'Installing mod-auto-revive...'
          git clone https://github.com/azerothcore/mod-auto-revive.git mod-auto-revive
        fi

        if [ "$MODULE_GAIN_HONOR_GUARD" = "1" ] && [ ! -d "mod-gain-honor-guard" ]; then
          echo 'Installing mod-gain-honor-guard...'
          git clone https://github.com/azerothcore/mod-gain-honor-guard.git mod-gain-honor-guard
        fi

        if [ "$MODULE_ELUNA" = "1" ] && [ ! -d "mod-eluna" ]; then
          echo 'Installing mod-eluna...'
          git clone https://github.com/azerothcore/mod-eluna.git mod-eluna
        fi

        if [ "$MODULE_TIME_IS_TIME" = "1" ] && [ ! -d "mod-TimeIsTime" ]; then
          echo 'Installing mod-TimeIsTime...'
          git clone https://github.com/dunjeon/mod-TimeIsTime.git mod-TimeIsTime
        fi

        if [ "$MODULE_POCKET_PORTAL" = "1" ] && [ ! -d "mod-pocket-portal" ]; then
          echo 'Installing mod-pocket-portal...'
          git clone https://github.com/azerothcore/mod-pocket-portal.git mod-pocket-portal
        fi

        if [ "$MODULE_RANDOM_ENCHANTS" = "1" ] && [ ! -d "mod-random-enchants" ]; then
          echo 'Installing mod-random-enchants...'
          git clone https://github.com/azerothcore/mod-random-enchants.git mod-random-enchants
        fi

        if [ "$MODULE_SOLOCRAFT" = "1" ] && [ ! -d "mod-solocraft" ]; then
          echo 'üéØ Installing mod-solocraft...'
          echo '   üìñ Project: https://github.com/azerothcore/mod-solocraft'
          echo '   ‚ÑπÔ∏è  Scales dungeon/raid difficulty for solo players'
          echo '   üîß REBUILD REQUIRED: Container must be rebuilt with source-based compilation'
          echo '   üí° Works well with mod-autobalance and mod-solo-lfg'
          git clone https://github.com/azerothcore/mod-solocraft.git mod-solocraft
        fi

        if [ "$MODULE_PVP_TITLES" = "1" ] && [ ! -d "mod-pvp-titles" ]; then
          echo 'Installing mod-pvp-titles...'
          git clone https://github.com/azerothcore/mod-pvp-titles.git mod-pvp-titles
        fi

        if [ "$MODULE_NPC_BEASTMASTER" = "1" ] && [ ! -d "mod-npc-beastmaster" ]; then
          echo 'Installing mod-npc-beastmaster...'
          git clone https://github.com/azerothcore/mod-npc-beastmaster.git mod-npc-beastmaster
        fi

        if [ "$MODULE_NPC_ENCHANTER" = "1" ] && [ ! -d "mod-npc-enchanter" ]; then
          echo 'Installing mod-npc-enchanter...'
          git clone https://github.com/azerothcore/mod-npc-enchanter.git mod-npc-enchanter
        fi

        if [ "$MODULE_INSTANCE_RESET" = "1" ] && [ ! -d "mod-instance-reset" ]; then
          echo 'Installing mod-instance-reset...'
          git clone https://github.com/azerothcore/mod-instance-reset.git mod-instance-reset
        fi

        if [ "$MODULE_LEVEL_GRANT" = "1" ] && [ ! -d "mod-quest-count-level" ]; then
          echo 'Installing mod-quest-count-level...'
          git clone https://github.com/michaeldelago/mod-quest-count-level.git mod-quest-count-level
        fi

        echo 'Managing configuration files...'

        # Remove configuration files for disabled modules
        if [ "$MODULE_PLAYERBOTS" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/playerbots.conf*
        fi

        if [ "$MODULE_AOE_LOOT" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/mod_aoe_loot.conf*
        fi

        if [ "$MODULE_LEARN_SPELLS" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/mod_learnspells.conf*
        fi

        if [ "$MODULE_FIREWORKS" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/mod_fireworks.conf*
        fi

        if [ "$MODULE_INDIVIDUAL_PROGRESSION" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/individual_progression.conf*
        fi

        if [ "$MODULE_AHBOT" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/mod_ahbot.conf*
        fi

        if [ "$MODULE_AUTOBALANCE" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/AutoBalance.conf*
        fi

        if [ "$MODULE_TRANSMOG" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/transmog.conf*
        fi

        if [ "$MODULE_NPC_BUFFER" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/npc_buffer.conf*
        fi

        if [ "$MODULE_DYNAMIC_XP" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/Individual-XP.conf*
        fi

        if [ "$MODULE_SOLO_LFG" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/SoloLfg.conf*
        fi

        if [ "$MODULE_1V1_ARENA" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/1v1arena.conf*
        fi

        if [ "$MODULE_PHASED_DUELS" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/phasedduels.conf*
        fi

        if [ "$MODULE_BREAKING_NEWS" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/breaking_news.conf*
        fi

        if [ "$MODULE_BOSS_ANNOUNCER" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/boss_announcer.conf*
        fi

        if [ "$MODULE_ACCOUNT_ACHIEVEMENTS" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/account_achievements.conf*
        fi

        if [ "$MODULE_AUTO_REVIVE" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/AutoRevive.conf*
        fi

        if [ "$MODULE_GAIN_HONOR_GUARD" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/GainHonorGuard.conf*
        fi

        if [ "$MODULE_ELUNA" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/mod_LuaEngine.conf*
        fi

        if [ "$MODULE_TIME_IS_TIME" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/mod-time_is_time.conf*
        fi

        if [ "$MODULE_POCKET_PORTAL" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/pocketportal.conf*
        fi

        if [ "$MODULE_RANDOM_ENCHANTS" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/RandomEnchants.conf*
        fi

        if [ "$MODULE_SOLOCRAFT" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/Solocraft.conf*
        fi

        if [ "$MODULE_PVP_TITLES" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/mod_pvptitles.conf*
        fi

        if [ "$MODULE_NPC_BEASTMASTER" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/npc_beastmaster.conf*
        fi

        if [ "$MODULE_NPC_ENCHANTER" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/npc_enchanter.conf*
        fi

        if [ "$MODULE_INSTANCE_RESET" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/instance-reset.conf*
        fi

        if [ "$MODULE_LEVEL_GRANT" != "1" ]; then
          rm -f /azerothcore/env/dist/etc/levelGrant.conf*
        fi

        # Install configuration files for enabled modules
        for module_dir in mod-*; do
          if [ -d "$$module_dir" ]; then
            echo "Installing config files for $$module_dir..."
            find "$$module_dir" -name "*.conf.dist" -exec cp {} /azerothcore/env/dist/etc/ \; 2>/dev/null || true
          fi
        done

        echo 'Configuration file management complete.'

        echo 'Executing module SQL scripts...'

        # Function to execute SQL files for a module
        execute_module_sql() {
          local module_dir="$$1"
          local module_name="$$2"

          echo "Processing SQL scripts for $$module_name..."

          # Find and execute SQL files in the module
          if [ -d "$$module_dir/data/sql" ]; then
            # Execute world database scripts
            if [ -d "$$module_dir/data/sql/world" ]; then
              find "$$module_dir/data/sql/world" -name "*.sql" -type f | while read sql_file; do
                echo "  Executing world SQL: $$(basename "$$sql_file")"
                if mysql --skip-ssl-verify -h "${CONTAINER_MYSQL}" -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" "${DB_WORLD_NAME}" < "$$sql_file" >/dev/null 2>&1; then
                  echo "    ‚úÖ Successfully executed $$(basename "$$sql_file")"
                else
                  echo "    ‚ùå Failed to execute $$sql_file"
                fi
              done
            fi

            # Execute auth database scripts
            if [ -d "$$module_dir/data/sql/auth" ]; then
              find "$$module_dir/data/sql/auth" -name "*.sql" -type f | while read sql_file; do
                echo "  Executing auth SQL: $$(basename "$$sql_file")"
                if mysql --skip-ssl-verify -h "${CONTAINER_MYSQL}" -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" "${DB_AUTH_NAME}" < "$$sql_file" >/dev/null 2>&1; then
                  echo "    ‚úÖ Successfully executed $$(basename "$$sql_file")"
                else
                  echo "    ‚ùå Failed to execute $$sql_file"
                fi
              done
            fi

            # Execute character database scripts
            if [ -d "$$module_dir/data/sql/characters" ]; then
              find "$$module_dir/data/sql/characters" -name "*.sql" -type f | while read sql_file; do
                echo "  Executing characters SQL: $$(basename "$$sql_file")"
                if mysql --skip-ssl-verify -h "${CONTAINER_MYSQL}" -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" "${DB_CHARACTERS_NAME}" < "$$sql_file" >/dev/null 2>&1; then
                  echo "    ‚úÖ Successfully executed $$(basename "$$sql_file")"
                else
                  echo "    ‚ùå Failed to execute $$sql_file"
                fi
              done
            fi

            # Execute base SQL files (common pattern)
            find "$$module_dir/data/sql" -maxdepth 1 -name "*.sql" -type f | while read sql_file; do
              echo "  Executing base SQL: $$(basename "$$sql_file")"
              mysql -h "${CONTAINER_MYSQL}" -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" "${DB_WORLD_NAME}" < "$$sql_file" 2>/dev/null || echo "    Warning: Failed to execute $$sql_file"
            done
          fi

          # Look for SQL files in other common locations
          if [ -d "$$module_dir/sql" ]; then
            find "$$module_dir/sql" -name "*.sql" -type f | while read sql_file; do
              echo "  Executing SQL: $$(basename "$$sql_file")"
              mysql -h "${CONTAINER_MYSQL}" -P 3306 -u root -p"${MYSQL_ROOT_PASSWORD}" "${DB_WORLD_NAME}" < "$$sql_file" 2>/dev/null || echo "    Warning: Failed to execute $$sql_file"
            done
          fi
        }

        # Install MySQL client if not available
        which mysql >/dev/null 2>&1 || {
          echo "Installing MySQL client..."
          apk add --no-cache mysql-client >/dev/null 2>&1 || echo "Warning: Could not install MySQL client"
        }

        # Execute SQL for enabled modules only
        if [ "$MODULE_PLAYERBOTS" = "1" ] && [ -d "mod-playerbots" ]; then
          execute_module_sql "mod-playerbots" "Playerbots"
        fi

        if [ "$MODULE_AOE_LOOT" = "1" ] && [ -d "mod-aoe-loot" ]; then
          execute_module_sql "mod-aoe-loot" "AoE Loot"
        fi

        if [ "$MODULE_LEARN_SPELLS" = "1" ] && [ -d "mod-learn-spells" ]; then
          execute_module_sql "mod-learn-spells" "Learn Spells"
        fi

        if [ "$MODULE_FIREWORKS" = "1" ] && [ -d "mod-fireworks-on-level" ]; then
          execute_module_sql "mod-fireworks-on-level" "Fireworks"
        fi

        if [ "$MODULE_INDIVIDUAL_PROGRESSION" = "1" ] && [ -d "mod-individual-progression" ]; then
          execute_module_sql "mod-individual-progression" "Individual Progression"
        fi

        if [ "$MODULE_AHBOT" = "1" ] && [ -d "mod-ahbot" ]; then
          execute_module_sql "mod-ahbot" "AHBot"
        fi

        if [ "$MODULE_AUTOBALANCE" = "1" ] && [ -d "mod-autobalance" ]; then
          execute_module_sql "mod-autobalance" "AutoBalance"
        fi

        if [ "$MODULE_TRANSMOG" = "1" ] && [ -d "mod-transmog" ]; then
          execute_module_sql "mod-transmog" "Transmog"
        fi

        if [ "$MODULE_NPC_BUFFER" = "1" ] && [ -d "mod-npc-buffer" ]; then
          execute_module_sql "mod-npc-buffer" "NPC Buffer"
        fi

        if [ "$MODULE_DYNAMIC_XP" = "1" ] && [ -d "mod-dynamic-xp" ]; then
          execute_module_sql "mod-dynamic-xp" "Dynamic XP"
        fi

        if [ "$MODULE_SOLO_LFG" = "1" ] && [ -d "mod-solo-lfg" ]; then
          execute_module_sql "mod-solo-lfg" "Solo LFG"
        fi

        if [ "$MODULE_1V1_ARENA" = "1" ] && [ -d "mod-1v1-arena" ]; then
          execute_module_sql "mod-1v1-arena" "1v1 Arena"
        fi

        if [ "$MODULE_PHASED_DUELS" = "1" ] && [ -d "mod-phased-duels" ]; then
          execute_module_sql "mod-phased-duels" "Phased Duels"
        fi

        if [ "$MODULE_BREAKING_NEWS" = "1" ] && [ -d "mod-breaking-news-override" ]; then
          execute_module_sql "mod-breaking-news-override" "Breaking News"
        fi

        if [ "$MODULE_BOSS_ANNOUNCER" = "1" ] && [ -d "mod-boss-announcer" ]; then
          execute_module_sql "mod-boss-announcer" "Boss Announcer"
        fi

        if [ "$MODULE_ACCOUNT_ACHIEVEMENTS" = "1" ] && [ -d "mod-account-achievements" ]; then
          execute_module_sql "mod-account-achievements" "Account Achievements"
        fi

        if [ "$MODULE_AUTO_REVIVE" = "1" ] && [ -d "mod-auto-revive" ]; then
          execute_module_sql "mod-auto-revive" "Auto Revive"
        fi

        if [ "$MODULE_GAIN_HONOR_GUARD" = "1" ] && [ -d "mod-gain-honor-guard" ]; then
          execute_module_sql "mod-gain-honor-guard" "Gain Honor Guard"
        fi

        if [ "$MODULE_ELUNA" = "1" ] && [ -d "mod-eluna" ]; then
          execute_module_sql "mod-eluna" "Eluna"
        fi

        if [ "$MODULE_TIME_IS_TIME" = "1" ] && [ -d "mod-TimeIsTime" ]; then
          execute_module_sql "mod-TimeIsTime" "Time Is Time"
        fi

        if [ "$MODULE_POCKET_PORTAL" = "1" ] && [ -d "mod-pocket-portal" ]; then
          execute_module_sql "mod-pocket-portal" "Pocket Portal"
        fi

        if [ "$MODULE_RANDOM_ENCHANTS" = "1" ] && [ -d "mod-random-enchants" ]; then
          execute_module_sql "mod-random-enchants" "Random Enchants"
        fi

        if [ "$MODULE_SOLOCRAFT" = "1" ] && [ -d "mod-solocraft" ]; then
          execute_module_sql "mod-solocraft" "Solocraft"
        fi

        if [ "$MODULE_PVP_TITLES" = "1" ] && [ -d "mod-pvp-titles" ]; then
          execute_module_sql "mod-pvp-titles" "PvP Titles"
        fi

        if [ "$MODULE_NPC_BEASTMASTER" = "1" ] && [ -d "mod-npc-beastmaster" ]; then
          execute_module_sql "mod-npc-beastmaster" "NPC Beastmaster"
        fi

        if [ "$MODULE_NPC_ENCHANTER" = "1" ] && [ -d "mod-npc-enchanter" ]; then
          execute_module_sql "mod-npc-enchanter" "NPC Enchanter"
        fi

        if [ "$MODULE_INSTANCE_RESET" = "1" ] && [ -d "mod-instance-reset" ]; then
          execute_module_sql "mod-instance-reset" "Instance Reset"
        fi

        if [ "$MODULE_LEVEL_GRANT" = "1" ] && [ -d "mod-quest-count-level" ]; then
          execute_module_sql "mod-quest-count-level" "Level Grant"
        fi

        echo 'SQL execution complete.'

        # Module state tracking and rebuild logic
        echo 'Checking for module changes that require rebuild...'

        MODULES_STATE_FILE="/modules/.modules_state"
        CURRENT_STATE=""
        REBUILD_REQUIRED=0

        # Create current module state hash
        for module_var in MODULE_PLAYERBOTS MODULE_AOE_LOOT MODULE_LEARN_SPELLS MODULE_FIREWORKS MODULE_INDIVIDUAL_PROGRESSION MODULE_AHBOT MODULE_AUTOBALANCE MODULE_TRANSMOG MODULE_NPC_BUFFER MODULE_DYNAMIC_XP MODULE_SOLO_LFG MODULE_1V1_ARENA MODULE_PHASED_DUELS MODULE_BREAKING_NEWS MODULE_BOSS_ANNOUNCER MODULE_ACCOUNT_ACHIEVEMENTS MODULE_AUTO_REVIVE MODULE_GAIN_HONOR_GUARD MODULE_ELUNA MODULE_TIME_IS_TIME MODULE_POCKET_PORTAL MODULE_RANDOM_ENCHANTS MODULE_SOLOCRAFT MODULE_PVP_TITLES MODULE_NPC_BEASTMASTER MODULE_NPC_ENCHANTER MODULE_INSTANCE_RESET MODULE_LEVEL_GRANT; do
          eval "value=\$$module_var"
          CURRENT_STATE="$CURRENT_STATE$module_var=$value|"
        done

        # Check if state has changed
        if [ -f "$MODULES_STATE_FILE" ]; then
          PREVIOUS_STATE=$(cat "$MODULES_STATE_FILE")
          if [ "$CURRENT_STATE" != "$PREVIOUS_STATE" ]; then
            echo "üîÑ Module configuration has changed - rebuild required"
            REBUILD_REQUIRED=1
          else
            echo "‚úÖ No module changes detected"
          fi
        else
          echo "üìù First run - establishing module state baseline"
          REBUILD_REQUIRED=1
        fi

        # Save current state
        echo "$CURRENT_STATE" > "$MODULES_STATE_FILE"

        # Check if any C++ modules are enabled (all current modules require compilation)
        ENABLED_MODULES=""
        [ "$MODULE_PLAYERBOTS" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-playerbots"
        [ "$MODULE_AOE_LOOT" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-aoe-loot"
        [ "$MODULE_LEARN_SPELLS" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-learn-spells"
        [ "$MODULE_FIREWORKS" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-fireworks-on-level"
        [ "$MODULE_INDIVIDUAL_PROGRESSION" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-individual-progression"
        [ "$MODULE_AHBOT" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-ahbot"
        [ "$MODULE_AUTOBALANCE" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-autobalance"
        [ "$MODULE_TRANSMOG" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-transmog"
        [ "$MODULE_NPC_BUFFER" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-npc-buffer"
        [ "$MODULE_DYNAMIC_XP" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-dynamic-xp"
        [ "$MODULE_SOLO_LFG" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-solo-lfg"
        [ "$MODULE_1V1_ARENA" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-1v1-arena"
        [ "$MODULE_PHASED_DUELS" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-phased-duels"
        [ "$MODULE_BREAKING_NEWS" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-breaking-news-override"
        [ "$MODULE_BOSS_ANNOUNCER" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-boss-announcer"
        [ "$MODULE_ACCOUNT_ACHIEVEMENTS" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-account-achievements"
        [ "$MODULE_AUTO_REVIVE" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-auto-revive"
        [ "$MODULE_GAIN_HONOR_GUARD" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-gain-honor-guard"
        [ "$MODULE_ELUNA" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-eluna"
        [ "$MODULE_TIME_IS_TIME" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-time-is-time"
        [ "$MODULE_POCKET_PORTAL" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-pocket-portal"
        [ "$MODULE_RANDOM_ENCHANTS" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-random-enchants"
        [ "$MODULE_SOLOCRAFT" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-solocraft"
        [ "$MODULE_PVP_TITLES" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-pvp-titles"
        [ "$MODULE_NPC_BEASTMASTER" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-npc-beastmaster"
        [ "$MODULE_NPC_ENCHANTER" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-npc-enchanter"
        [ "$MODULE_INSTANCE_RESET" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-instance-reset"
        [ "$MODULE_LEVEL_GRANT" = "1" ] && ENABLED_MODULES="$ENABLED_MODULES mod-quest-count-level"

        if [ -n "$ENABLED_MODULES" ]; then
          ENABLED_COUNT=$(echo $ENABLED_MODULES | wc -w)
          echo "üîß Detected $ENABLED_COUNT enabled C++ modules requiring compilation:"
          for mod in $ENABLED_MODULES; do
            echo "   ‚Ä¢ $mod"
          done

          if [ "$REBUILD_REQUIRED" = "1" ]; then
            echo ""
            echo "üö® REBUILD REQUIRED üö®"
            echo "Module configuration has changed. To integrate C++ modules into AzerothCore:"
            echo ""
            echo "1. Stop current services:"
            echo "   docker compose -f docker-compose-azerothcore-services.yml down"
            echo ""
            echo "2. Build with source-based compilation:"
            echo "   docker compose -f /tmp/acore-dev-test/docker-compose.yml build"
            echo "   docker compose -f /tmp/acore-dev-test/docker-compose.yml up -d"
            echo ""
            echo "3. Or use the automated rebuild script (if available):"
            echo "   ./scripts/rebuild-with-modules.sh"
            echo ""
            echo "üìã NOTE: Source-based build will compile AzerothCore with all enabled modules"
            echo "‚è±Ô∏è  Expected build time: 15-45 minutes depending on system performance"
            echo ""
          fi
        else
          echo "‚úÖ No C++ modules enabled - pre-built containers can be used"
        fi

        echo 'Module management complete. Keeping container alive...'
        tail -f /dev/null
    restart: "no"
    networks:
      - azerothcore

  # Auto Post-Install Configuration Service
  ac-post-install:
    image: ${ALPINE_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_POST_INSTALL}
    user: "0:0"  # Run as root for full permissions
    volumes:
      - ${STORAGE_PATH}/config:/azerothcore/config
      - ${STORAGE_PATH}/install-markers:/install-markers
      - .:/project
    working_dir: /project
    environment:
      MYSQL_HOST: ${CONTAINER_MYSQL}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      DB_AUTH_NAME: ${DB_AUTH_NAME}
      DB_WORLD_NAME: ${DB_WORLD_NAME}
      DB_CHARACTERS_NAME: ${DB_CHARACTERS_NAME}
      STORAGE_PATH: ${STORAGE_PATH}
      SERVER_ADDRESS: ${SERVER_ADDRESS}
      REALM_PORT: ${REALM_PORT}
      NETWORK_NAME: ${NETWORK_NAME}
    depends_on:
      - ac-modules
    command:
      - sh
      - -c
      - |
        # Install bash first
        echo "üì¶ Installing bash..."
        apk add --no-cache bash

        # Download post-install script from GitHub (fallback to local for testing)
        echo "üì• Downloading auto post-install script..."
        echo "üîç Checking project directory contents:"
        ls -la /project/scripts/ || echo "‚ùå /project/scripts/ not found"

        if curl -fsSL https://raw.githubusercontent.com/uprightbass360/acore-compose/main/scripts/auto-post-install.sh -o /tmp/auto-post-install.sh 2>/dev/null; then
          echo "‚úÖ Downloaded from GitHub"
        elif [ -f "/project/scripts/auto-post-install.sh" ]; then
          echo "üìÅ Using local script for testing"
          echo "üîç File details:"
          ls -la /project/scripts/auto-post-install.sh
          cp /project/scripts/auto-post-install.sh /tmp/auto-post-install.sh
          echo "‚úÖ Copied to /tmp/auto-post-install.sh"
          ls -la /tmp/auto-post-install.sh
        else
          echo "‚ùå Script not found in GitHub or locally"
          echo "üîç Available files in /project/scripts/:"
          ls -la /project/scripts/ || echo "Directory not accessible"
          exit 1
        fi
        chmod +x /tmp/auto-post-install.sh
        echo "üöÄ Executing script with bash..."
        bash /tmp/auto-post-install.sh
    restart: "no"
    networks:
      - azerothcore

networks:
  azerothcore:
    external: true
    name: ${NETWORK_NAME}