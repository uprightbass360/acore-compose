# ==============================================
# AZEROTHCORE DATABASE LAYER - PORTAINER VERSION (CLEAN)
# ==============================================
# Modified for better Portainer compatibility
# Removed redundant ac-mysql-persist service

services:
  # Step 1: MySQL database
  ac-mysql:
    image: ${MYSQL_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_MYSQL}
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: '${MYSQL_ROOT_HOST}'
      MYSQL_ALLOW_EMPTY_PASSWORD: no
      MYSQL_DATADIR: /var/lib/mysql-runtime
    ports:
      - "${MYSQL_EXTERNAL_PORT}:${MYSQL_PORT}"
    volumes:
      - ${STORAGE_PATH}/mysql-data:/var/lib/mysql-persistent
      - type: tmpfs
        target: /var/lib/mysql-runtime
        tmpfs:
          size: 2G
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        echo "üîß Starting MySQL with NFS-compatible setup..."
        mkdir -p /var/lib/mysql-runtime
        chown -R mysql:mysql /var/lib/mysql-runtime
        chmod 755 /var/lib/mysql-runtime

        if [ -f "/var/lib/mysql-persistent/backup.sql" ]; then
          echo "üì¶ SQL backup found, will restore after MySQL starts..."
        else
          echo "üÜï No backup found, will initialize fresh MySQL..."
        fi

        echo "üöÄ Starting MySQL server with custom datadir..."
        exec docker-entrypoint.sh mysqld \
          --datadir=/var/lib/mysql-runtime \
          --default-authentication-plugin=mysql_native_password \
          --character-set-server=${MYSQL_CHARACTER_SET} \
          --collation-server=${MYSQL_COLLATION} \
          --max_connections=${MYSQL_MAX_CONNECTIONS} \
          --innodb-buffer-pool-size=${MYSQL_INNODB_BUFFER_POOL_SIZE} \
          --innodb-log-file-size=${MYSQL_INNODB_LOG_FILE_SIZE}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "mysqladmin ping -h localhost -u ${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} --silent || exit 1"]
      interval: ${MYSQL_HEALTHCHECK_INTERVAL}
      timeout: ${MYSQL_HEALTHCHECK_TIMEOUT}
      retries: ${MYSQL_HEALTHCHECK_RETRIES}
      start_period: ${MYSQL_HEALTHCHECK_START_PERIOD}
    networks:
      - azerothcore

  # Step 2: Backup service
  ac-backup:
    image: ${MYSQL_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_BACKUP}
    environment:
      MYSQL_HOST: ${CONTAINER_MYSQL}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS}
      BACKUP_CRON_SCHEDULE: ${BACKUP_CRON_SCHEDULE}
      TZ: ${TZ}
    volumes:
      - ${HOST_BACKUP_PATH}:/backups
      - ${HOST_BACKUP_SCRIPTS_PATH}:/scripts
    working_dir: /scripts
    command:
      - /bin/bash
      - -c
      - |
        echo "üîß Starting backup service using external script..."

        # Make sure backup script is executable
        chmod +x /scripts/backup.sh

        # Wait for MySQL to be ready before starting backup service
        echo "‚è≥ Waiting for MySQL to be ready..."
        sleep 30

        # Run initial backup
        echo "üöÄ Running initial backup..."
        /scripts/backup.sh

        # Simple cron-like scheduler (runs backup at 3 AM daily)
        echo "‚è∞ Starting backup scheduler with schedule: ${BACKUP_CRON_SCHEDULE}"
        echo "üìÖ Backup retention: ${BACKUP_RETENTION_DAYS} days"

        while true; do
          current_hour=$(date +%H)
          current_minute=$(date +%M)

          # Check if it's 3:00 AM (matching default cron schedule)
          if [ "$$current_hour" = "03" ] && [ "$$current_minute" = "00" ]; then
            echo "‚è∞ [$(date)] Scheduled backup time reached, running backup..."
            /scripts/backup.sh
            # Sleep for 2 minutes to avoid running multiple times
            sleep 120
          else
            # Sleep for 1 minute before checking again
            sleep 60
          fi
        done
    restart: unless-stopped
    networks:
      - azerothcore

  # Step 3: Database initialization (one-time setup)
  ac-db-init:
    image: ${MYSQL_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_DB_INIT}
    volumes:
      - ${STORAGE_PATH}/mysql-data:/var/lib/mysql-persistent
    networks:
      - azerothcore
    environment:
      MYSQL_PWD: ${MYSQL_ROOT_PASSWORD}
    command:
      - sh
      - -c
      - |
        echo "üîß Waiting for MySQL to be ready..."

        # Wait for MySQL to be responsive with longer timeout
        for i in $(seq 1 ${DB_WAIT_RETRIES}); do
          if mysql -h ${MYSQL_HOST} -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1;" >/dev/null 2>&1; then
            echo "‚úÖ MySQL is responsive"
            break
          fi
          echo "‚è≥ Waiting for MySQL... attempt $$i/${DB_WAIT_RETRIES}"
          sleep ${DB_WAIT_SLEEP}
        done

        # Check if we should restore from backup
        if [ -f "/var/lib/mysql-persistent/backup.sql" ]; then
          echo "üîÑ Restoring databases from backup..."
          mysql -h ${MYSQL_HOST} -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} < /var/lib/mysql-persistent/backup.sql || {
            echo "‚ö†Ô∏è Backup restore failed, will create fresh databases"
          }
        fi

        echo "üóÑÔ∏è Creating/verifying AzerothCore databases..."
        mysql -h ${MYSQL_HOST} -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} -e "
        CREATE DATABASE IF NOT EXISTS ${DB_AUTH_NAME} DEFAULT CHARACTER SET ${MYSQL_CHARACTER_SET} COLLATE ${MYSQL_COLLATION};
        CREATE DATABASE IF NOT EXISTS ${DB_WORLD_NAME} DEFAULT CHARACTER SET ${MYSQL_CHARACTER_SET} COLLATE ${MYSQL_COLLATION};
        CREATE DATABASE IF NOT EXISTS ${DB_CHARACTERS_NAME} DEFAULT CHARACTER SET ${MYSQL_CHARACTER_SET} COLLATE ${MYSQL_COLLATION};
        SHOW DATABASES;
        " || {
          echo "‚ùå Failed to create databases"
          exit 1
        }
        echo "‚úÖ Databases ready!"
    restart: "no"

  # Step 4: Database import (one-time setup - run after db-init)
  ac-db-import:
    image: ${AC_DB_IMPORT_IMAGE}
    pull_policy: ${IMAGE_PULL_POLICY}
    container_name: ${CONTAINER_DB_IMPORT}
    user: "0:0"
    networks:
      - azerothcore
    volumes:
      - ${STORAGE_PATH}/config:/azerothcore/env/dist/etc
    environment:
      AC_DATA_DIR: "/azerothcore/data"
      AC_LOGS_DIR: "/azerothcore/logs"
      AC_LOGIN_DATABASE_INFO: "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_AUTH_NAME}"
      AC_WORLD_DATABASE_INFO: "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_WORLD_NAME}"
      AC_CHARACTER_DATABASE_INFO: "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_CHARACTERS_NAME}"
      AC_CLOSE_IDLE_CONNECTIONS: "false"
      AC_UPDATES_ENABLE_DATABASES: "7"
      AC_UPDATES_AUTO_SETUP: "1"
      AC_LOG_LEVEL: "1"
      AC_LOGGER_ROOT_CONFIG: "1,Console"
      AC_LOGGER_SERVER_CONFIG: "1,Console"
      AC_APPENDER_CONSOLE_CONFIG: "1,2,0"
    entrypoint: ["/bin/bash", "-c"]
    command:
      - |
        echo 'Waiting for databases to be ready...'

        # Wait for databases to exist with longer timeout
        for i in $(seq 1 120); do
          if mysql -h ${CONTAINER_MYSQL} -u${MYSQL_USER} -p${MYSQL_ROOT_PASSWORD} -e "USE ${DB_AUTH_NAME}; USE ${DB_WORLD_NAME}; USE ${DB_CHARACTERS_NAME};" >/dev/null 2>&1; then
            echo "‚úÖ All databases accessible"
            break
          fi
          echo "‚è≥ Waiting for databases... attempt $$i/120"
          sleep 5
        done

        echo 'Creating config file for dbimport...'
        mkdir -p /azerothcore/env/dist/etc
        cat > /azerothcore/env/dist/etc/dbimport.conf <<EOF
        LoginDatabaseInfo = "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_AUTH_NAME}"
        WorldDatabaseInfo = "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_WORLD_NAME}"
        CharacterDatabaseInfo = "${CONTAINER_MYSQL};${MYSQL_PORT};${MYSQL_USER};${MYSQL_ROOT_PASSWORD};${DB_CHARACTERS_NAME}"
        Updates.EnableDatabases = 7
        Updates.AutoSetup = 1
        EOF

        echo 'Running database import...'
        cd /azerothcore/env/dist/bin
        ./dbimport

        echo 'Database import complete!'
    restart: "no"

networks:
  azerothcore:
    driver: bridge
    name: ${NETWORK_NAME}
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}
          gateway: ${NETWORK_GATEWAY}